//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var main: main { .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func main(preferredLanguages: [String]) -> main {
      .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Load image
      ///
      /// Key: Load image
      ///
      /// Locales: en, ru
      var loadImage: RswiftResources.StringResource { .init(key: "Load image", tableName: "Localizable", source: source, developmentValue: "Load image", comment: nil) }

      /// en translation: You didn't pick any image
      ///
      /// Key: localizationAlertMessage
      ///
      /// Locales: en, ru
      var localizationAlertMessage: RswiftResources.StringResource { .init(key: "localizationAlertMessage", tableName: "Localizable", source: source, developmentValue: "You didn't pick any image", comment: nil) }

      /// en translation: Strange
      ///
      /// Key: localizationAlertTitle
      ///
      /// Locales: en, ru
      var localizationAlertTitle: RswiftResources.StringResource { .init(key: "localizationAlertTitle", tableName: "Localizable", source: source, developmentValue: "Strange", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: localizationCamera
      ///
      /// Locales: en, ru
      var localizationCamera: RswiftResources.StringResource { .init(key: "localizationCamera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: localizationCancel
      ///
      /// Locales: en, ru
      var localizationCancel: RswiftResources.StringResource { .init(key: "localizationCancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Enter URL
      ///
      /// Key: localizationEnterURL
      ///
      /// Locales: en, ru
      var localizationEnterURL: RswiftResources.StringResource { .init(key: "localizationEnterURL", tableName: "Localizable", source: source, developmentValue: "Enter URL", comment: nil) }

      /// en translation: I know
      ///
      /// Key: localizationOkActionAlertTitle
      ///
      /// Locales: en, ru
      var localizationOkActionAlertTitle: RswiftResources.StringResource { .init(key: "localizationOkActionAlertTitle", tableName: "Localizable", source: source, developmentValue: "I know", comment: nil) }

      /// en translation: Password
      ///
      /// Key: localizationPassword
      ///
      /// Locales: en, ru
      var localizationPassword: RswiftResources.StringResource { .init(key: "localizationPassword", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Photo Library
      ///
      /// Key: localizationPhoto
      ///
      /// Locales: en, ru
      var localizationPhoto: RswiftResources.StringResource { .init(key: "localizationPhoto", tableName: "Localizable", source: source, developmentValue: "Photo Library", comment: nil) }

      /// en translation: URL
      ///
      /// Key: localizationURL
      ///
      /// Locales: en, ru
      var localizationURL: RswiftResources.StringResource { .init(key: "localizationURL", tableName: "Localizable", source: source, developmentValue: "URL", comment: nil) }
    }

    /// This `_R.string.main` struct is generated, and contains static references to 8 localization keys.
    struct main {
      let source: RswiftResources.StringResource.Source

      /// en translation: Button
      ///
      /// Key: 7mX-WW-9sg.normalTitle
      ///
      /// Locales: ru, en
      var mXWW9sgNormalTitle: RswiftResources.StringResource { .init(key: "7mX-WW-9sg.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: CLOSE
      ///
      /// Key: 9Af-g3-9VY.configuration.title
      ///
      /// Locales: ru, en
      var afG39VYConfigurationTitle: RswiftResources.StringResource { .init(key: "9Af-g3-9VY.configuration.title", tableName: "Main", source: source, developmentValue: "CLOSE", comment: nil) }

      /// en translation: Button
      ///
      /// Key: 9Af-g3-9VY.normalTitle
      ///
      /// Locales: ru, en
      var afG39VYNormalTitle: RswiftResources.StringResource { .init(key: "9Af-g3-9VY.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: Button Over Keyboard
      ///
      /// Key: bSC-Dt-bUG.configuration.title
      ///
      /// Locales: ru, en
      var bSCDtBUGConfigurationTitle: RswiftResources.StringResource { .init(key: "bSC-Dt-bUG.configuration.title", tableName: "Main", source: source, developmentValue: "Button Over Keyboard", comment: nil) }

      /// en translation: Button
      ///
      /// Key: bSC-Dt-bUG.normalTitle
      ///
      /// Locales: ru, en
      var bSCDtBUGNormalTitle: RswiftResources.StringResource { .init(key: "bSC-Dt-bUG.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: Secure Gallery
      ///
      /// Key: iWo-DS-ZaD.text
      ///
      /// Locales: ru, en
      var iWoDSZaDText: RswiftResources.StringResource { .init(key: "iWo-DS-ZaD.text", tableName: "Main", source: source, developmentValue: "Secure Gallery", comment: nil) }

      /// en translation: Button
      ///
      /// Key: pP2-V3-uZe.normalTitle
      ///
      /// Locales: ru, en
      var pP2V3UZeNormalTitle: RswiftResources.StringResource { .init(key: "pP2-V3-uZe.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: Button
      ///
      /// Key: pW8-gp-Ghm.normalTitle
      ///
      /// Locales: ru, en
      var pW8GpGhmNormalTitle: RswiftResources.StringResource { .init(key: "pW8-gp-Ghm.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `GalleryCollectionViewCell`.
    var galleryCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<GalleryCollectionViewCell, GalleryCollectionViewCell> { .init(name: "GalleryCollectionViewCell", bundle: bundle, identifier: "GalleryCollectionViewCell") }

    /// Nib `GalleryViewController`.
    var galleryViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GalleryViewController", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `GalleryCollectionViewCell`.
    let galleryCollectionViewCell: RswiftResources.ReuseIdentifier<GalleryCollectionViewCell> = .init(identifier: "GalleryCollectionViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var fullScreenViewController: RswiftResources.StoryboardViewControllerIdentifier<FullScreenViewController> { .init(identifier: "FullScreenViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "lock.open") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'lock.open' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark.circle.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if fullScreenViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'fullScreenViewController' could not be loaded from storyboard 'Main' as 'FullScreenViewController'.") }
      }
    }
  }
}